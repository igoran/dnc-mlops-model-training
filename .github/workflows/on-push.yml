name: .NET Core
env:
  RELEASE_DIR: './ml/data/'
on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      name: Checkout unshallow
      with:
        fetch-depth: 0
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:        
        dotnet-version: '5.0'
    - name: Install dependencies
      run: dotnet restore
      working-directory: ml
    - name: Build
      run: dotnet build ml/ml.sln --configuration Release --no-restore
    - name: Test
      run: dotnet test ml/tester/tester.csproj --no-restore --verbosity normal
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.6.x'
    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
    - name: 'Run Training Tool -- [CHECK HERE Training-related statistics]'
      run: |
        echo ${PWD}
        echo ${RELEASE_DIR}
        dotnet run --project  ../trainer/trainer.csproj --configuration Release
      working-directory: ${{ env.RELEASE_DIR }}
      env:
        VERSION_NAME: ${{ steps.gitversion.outputs.nuGetVersionV2 }}-${{ steps.gitversion.outputs.shortSha }}
    - run: echo "${{ steps.gitversion.outputs.nuGetVersionV2 }}-${{ steps.gitversion.outputs.shortSha }}" >  ${{ env.RELEASE_DIR }}current-version.txt
    - name: Upload Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: artifact-folder
        path: ${{ env.RELEASE_DIR }}
  staging:
    needs: build
    name: Release Trained model on GH
    environment: 
      name: staging
      url: ${{ steps.create_release.outputs.html_url }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifact-folder
    - run: |        
        echo "VERSION_NAME=`cat ./current-version.txt`" >> $GITHUB_ENV
    - run: echo "Creating version ${{ env.VERSION_NAME }}"
    - name: Verify existing release
      run: |
        statuscode=$(curl -s -o /dev/null -w "%{http_code}" "https://github.com/igoran/dnc-mlops-model-training/releases/download/${{ env.VERSION_NAME }}/${{ env.VERSION_NAME }}.zip")        
        echo "RELEASE_STATUS_CODE=$statuscode" >> $GITHUB_ENV
    - name: Create Release
      if: ${{ env.RELEASE_STATUS_CODE == '404' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION_NAME }}
        release_name: Release  ${{ env.VERSION_NAME }}
        body_path: ./ReleaseInfo.md
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      if: ${{ env.RELEASE_STATUS_CODE == '404' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps           
        asset_path: ./model.zip
        asset_name: ${{ env.VERSION_NAME }}.zip
        asset_content_type: application/zip
    - name: Upload Release Dataset
      id: upload-release-dataset
      if: ${{ env.RELEASE_STATUS_CODE == '404' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps           
        asset_path: ./master_dataset.txt
        asset_name: master_dataset.txt
        asset_content_type: text/plain
    - name: Dispatch event Model Created
      uses: mvasigh/dispatch-action@main
      with:
        token: ${{ secrets.MY_GITHUB_TOKEN }}
        repo: dnc-mlops-model-serving
        owner: igoran
        event_type: model-created
        message: |
          {
            "ML_MODEL_VERSION": "${{ env.VERSION_NAME }}",
            "ML_MODEL_URI": "https://github.com/igoran/dnc-mlops-model-training/releases/download/${{ env.VERSION_NAME }}/${{ env.VERSION_NAME }}.zip"
          }